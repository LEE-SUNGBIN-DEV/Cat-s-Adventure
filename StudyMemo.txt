※ 창에서 작업하기 위해서는 해당 창의 윈도우 핸들(HWND)이 필요
※ 창에 그리기(랜더링) 위해서는 디바이스 컨택스트(HDC)가 필요
// ============= 대략적인 호출 순서
Core > Manager > Scene > Object

// ============= Core
[GameCore: 게임을 초기화 해주고 지속적으로 업데이트 해주는 클래스]
1. 메인 윈도우 핸들을 받아와서 저장 (필요한 클래스에 인자로 전달)
2. 메인 윈도우 창 크기를 조절
3. 메인 윈도우 DC를 받아와서 저장 (필요한 클래스에 인자로 전달)
4. 이중 버퍼링 사용을 위한 비트맵 생성
5. 각종 게임 매니저 초기화
6. Progress() 함수를 통해 게임을 실시간 업데이트

// ============= Manager
[KeyManager: 프레임 단위로 키보드 입력 상태를 제어 해주는 클래스]
1. KEY_STATE: NONE, DOWN, HOLD, UP의 4가지 상태 존재
2. KeyInfo: 해당 키의 상태와, 바로 이전 키입력에 대한 정보를 가진 구조체
3. KEY: 실제로 게임내에서 사용할 키들을 모아 둠
4. mappingVK[]: 실제로 게임내에서 사용할 키들을 WinAPI에서 사용하는 VK값과 "맵핑" 시켜줌
5. 윈도우창의 포커스 여부도 함께 판단

[TimeManager: 시간 동기화를 위한 클래스]
1. DT(델타 타임): 클라이언트 컴퓨터 사양과 관계없이 단위 시간에 대한 동일한 움직임을 보장
2. 윈도우 상단에 현재 프레임을 출력

[SceneManager: 모든 게임 씬을 모아둔 클래스]
1. 현재 씬을 업데이트
2. 현재 씬을 렌더링

// ============= Scene
[GameScene: 해당 씬에 존재하는 게임 "오브젝트"를 모아둔 클래스]
1. 해당 씬에 존재하는 게임 오브젝트의 업데이트 함수 호출
2. 해당 씬에 존재하는 게임 오브젝트의 랜더링 함수 호출

[GameSceneStart: 게임이 시작됐을때 처음 씬]

// ============= Object
[GameObject: 기본 오브젝트 클래스, 위치, 크기에 대한 정보를 가지고 있음]
1. 자기 자신의 상태(위치나 크기와 같은)를 업데이트
2. 자기 자신을 렌더링


